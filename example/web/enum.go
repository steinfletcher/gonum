// Code generated by "gonum -types=VerificationStatusEnum"; DO NOT EDIT.

package web

import "encoding/json"
import "errors"
import "fmt"

var verificationStatusInstance = VerificationStatusEnum{
	Verified:    "VERIFIED",
	NotVerified: "NOT_VERIFIED",
	Expired:     "EXPIRED",
}

// VerificationStatus is the enum that instances should be created from
type VerificationStatus struct {
	name  string
	value string
}

// Enum instances
var Verified = VerificationStatus{name: "VERIFIED", value: "Verified"}
var NotVerified = VerificationStatus{name: "NOT_VERIFIED", value: "NotVerified"}
var Expired = VerificationStatus{name: "EXPIRED", value: "Expired"}

// NewVerificationStatus generates a new VerificationStatus from the given display value (name)
func NewVerificationStatus(value string) (VerificationStatus, error) {
	switch value {
	case "VERIFIED":
		return Verified, nil
	case "NOT_VERIFIED":
		return NotVerified, nil
	case "EXPIRED":
		return Expired, nil
	default:
		return VerificationStatus{}, errors.New(
			fmt.Sprintf("'%s' is not a valid value for type", value))
	}
}

// Name returns the enum display value
func (g VerificationStatus) Name() string {
	switch g {
	case Verified:
		return Verified.name
	case NotVerified:
		return NotVerified.name
	case Expired:
		return Expired.name
	default:
		panic("Could not map enum")
	}
}

// String returns the enum display value and is an alias of Name to implement the Stringer interface
func (g VerificationStatus) String() string {
	return g.Name()
}

// VerificationStatusNames returns the displays values of all enum instances as a slice
func VerificationStatusNames() []string {
	return []string{
		"VERIFIED",
		"NOT_VERIFIED",
		"EXPIRED",
	}
}

// VerificationStatusValues returns all enum instances as a slice
func VerificationStatusValues() []VerificationStatus {
	return []VerificationStatus{
		Verified,
		NotVerified,
		Expired,
	}
}

// MarshalJSON provides json marshalling support by implementing the Marshaler interface
func (g VerificationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(g.Name())
}

// UnmarshalJSON provides json unmarshalling support by implementing the Unmarshaler interface
func (g *VerificationStatus) UnmarshalJSON(b []byte) error {
	var v string
	err := json.Unmarshal(b, &v)
	if err != nil {
		return err
	}

	instance, createErr := NewVerificationStatus(v)
	if createErr != nil {
		return createErr
	}

	g.name = instance.name
	g.value = instance.value

	return nil
}
