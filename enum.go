// Code generated by "gonum -types=ColorEnum,StatusEnum"; DO NOT EDIT.

package main

var colorInstance = ColorEnum{
	Red:  "RED",
	Blue: "BLUE",
}

type Color uint

const (
	Red = iota
	Blue
)

func (g Color) Value() string {
	switch g {
	case Red:
		return colorInstance.Red
	case Blue:
		return colorInstance.Blue
	default:
		panic("Could not map enum")
	}
}

func NewColor(value string) Color {
	switch value {
	case "RED":
		return Red
	case "BLUE":
		return Blue
	default:
		panic("Could not create enum from value")
	}
}

func ColorValues() []string {
	return []string{
		"RED",
		"BLUE",
	}
}

var statusInstance = StatusEnum{
	On:  "ON",
	Off: "OFF",
}

type Status uint

const (
	On = iota
	Off
)

func (g Status) Value() string {
	switch g {
	case On:
		return statusInstance.On
	case Off:
		return statusInstance.Off
	default:
		panic("Could not map enum")
	}
}

func NewStatus(value string) Status {
	switch value {
	case "ON":
		return On
	case "OFF":
		return Off
	default:
		panic("Could not create enum from value")
	}
}

func StatusValues() []string {
	return []string{
		"ON",
		"OFF",
	}
}
