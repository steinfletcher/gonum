// Code generated by "gonum -types=ColorEnum,StatusEnum"; DO NOT EDIT.

package main

import "encoding/json"
import "errors"
import "fmt"

var colorInstance = ColorEnum{
	Red:  "RED",
	Blue: "BLUE",
}

type Color uint

const (
	Red = iota
	Blue
)

func NewColor(value string) (Color, error) {
	switch value {
	case "RED":
		return Red, nil
	case "BLUE":
		return Blue, nil
	default:
		return 0, errors.New(fmt.Sprintf("'%s' is not a valid value for type", value))
	}
}

func (g Color) Name() string {
	switch g {
	case Red:
		return colorInstance.Red
	case Blue:
		return colorInstance.Blue
	default:
		panic("Could not map enum")
	}
}

func (g Color) String() string {
	return g.Name()
}

func ColorNames() []string {
	return []string{
		"RED",
		"BLUE",
	}
}

func ColorValues() []Color {
	return []Color{
		Red,
		Blue,
	}
}

func (g Color) MarshalJSON() ([]byte, error) {
	return json.Marshal(g.Name())
}

func (g *Color) UnmarshalJSON(b []byte) error {
	var v string
	err := json.Unmarshal(b, &v)
	if err != nil {
		return err
	}

	instance, createErr := NewColor(v)
	if createErr != nil {
		return createErr
	}
	g = &instance

	return nil
}

var statusInstance = StatusEnum{
	On:  "On",
	Off: "Off",
}

type Status uint

const (
	On = iota
	Off
)

func NewStatus(value string) (Status, error) {
	switch value {
	case "On":
		return On, nil
	case "Off":
		return Off, nil
	default:
		return 0, errors.New(fmt.Sprintf("'%s' is not a valid value for type", value))
	}
}

func (g Status) Name() string {
	switch g {
	case On:
		return statusInstance.On
	case Off:
		return statusInstance.Off
	default:
		panic("Could not map enum")
	}
}

func (g Status) String() string {
	return g.Name()
}

func StatusNames() []string {
	return []string{
		"On",
		"Off",
	}
}

func StatusValues() []Status {
	return []Status{
		On,
		Off,
	}
}

func (g Status) MarshalJSON() ([]byte, error) {
	return json.Marshal(g.Name())
}

func (g *Status) UnmarshalJSON(b []byte) error {
	var v string
	err := json.Unmarshal(b, &v)
	if err != nil {
		return err
	}

	instance, createErr := NewStatus(v)
	if createErr != nil {
		return createErr
	}
	g = &instance

	return nil
}
